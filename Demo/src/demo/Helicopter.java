
package demo;

import java.awt.Color;

public class Helicopter extends javax.swing.JFrame implements Observer {
    private final Observerble observerble = Observerble.getInstance();
    private boolean cleatToFire = false;
    public Helicopter() {
        observerble.addObserver(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jFrame1 = new javax.swing.JFrame();
        jLabelShoot = new javax.swing.JLabel();
        jLabelMissileOperation = new javax.swing.JLabel();
        jButtonSend = new javax.swing.JButton();
        jSliderHelicopter = new javax.swing.JSlider();
        jCheckBoxHelicopter = new javax.swing.JCheckBox();
        jLabelLaserOperation = new javax.swing.JLabel();
        jLabelAreaCleared = new javax.swing.JLabel();
        jLabelSolderCount = new javax.swing.JLabel();
        jLabelMissileOperation2 = new javax.swing.JLabel();
        jSpinnerSolderCount = new javax.swing.JSpinner();
        jSpinnerAmmoCount = new javax.swing.JSpinner();
        jLabelReseve = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaReciveMassage = new javax.swing.JTextArea();
        jTextFieldSend = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Helicopter");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelShoot.setBackground(new java.awt.Color(204, 255, 255));
        jLabelShoot.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelShoot.setForeground(new java.awt.Color(255, 255, 255));
        jLabelShoot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelShoot.setLabelFor(jLabelShoot);
        jLabelShoot.setText("Shoot");
        jLabelShoot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255), 2));
        getContentPane().add(jLabelShoot, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 40, 117, 30));

        jLabelMissileOperation.setBackground(new java.awt.Color(204, 121, 240));
        jLabelMissileOperation.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelMissileOperation.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMissileOperation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMissileOperation.setLabelFor(jLabelShoot);
        jLabelMissileOperation.setText("Missile Operation");
        jLabelMissileOperation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255), 2));
        getContentPane().add(jLabelMissileOperation, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 40, 122, 30));

        jButtonSend.setText("Send");
        jButtonSend.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jButtonSendItemStateChanged(evt);
            }
        });
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 380, 172, 39));

        jSliderHelicopter.setBackground(new java.awt.Color(255, 255, 255));
        jSliderHelicopter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jSliderHelicopter.setForeground(new java.awt.Color(0, 0, 0));
        jSliderHelicopter.setMajorTickSpacing(20);
        jSliderHelicopter.setMinorTickSpacing(10);
        jSliderHelicopter.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderHelicopter.setPaintLabels(true);
        jSliderHelicopter.setPaintTicks(true);
        jSliderHelicopter.setSnapToTicks(true);
        jSliderHelicopter.setValue(20);
        getContentPane().add(jSliderHelicopter, new org.netbeans.lib.awtextra.AbsoluteConstraints(538, 38, 68, 339));

        jCheckBoxHelicopter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jCheckBoxHelicopter.setText("Position");
        jCheckBoxHelicopter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxHelicopterItemStateChanged(evt);
            }
        });
        jCheckBoxHelicopter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHelicopterActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxHelicopter, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 87, 87, -1));

        jLabelLaserOperation.setBackground(new java.awt.Color(204, 255, 255));
        jLabelLaserOperation.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelLaserOperation.setForeground(new java.awt.Color(255, 255, 255));
        jLabelLaserOperation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelLaserOperation.setLabelFor(jLabelShoot);
        jLabelLaserOperation.setText("Laser Operation");
        jLabelLaserOperation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255), 2));
        getContentPane().add(jLabelLaserOperation, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 82, 117, 30));

        jLabelAreaCleared.setBackground(new java.awt.Color(204, 255, 255));
        jLabelAreaCleared.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabelAreaCleared.setForeground(new java.awt.Color(255, 0, 0));
        jLabelAreaCleared.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAreaCleared.setLabelFor(jLabelShoot);
        jLabelAreaCleared.setText("Area Not Cleared");
        getContentPane().add(jLabelAreaCleared, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 6, 139, 28));

        jLabelSolderCount.setBackground(new java.awt.Color(204, 255, 255));
        jLabelSolderCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSolderCount.setLabelFor(jLabelShoot);
        jLabelSolderCount.setText("Solder Count");
        getContentPane().add(jLabelSolderCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 45, 95, -1));

        jLabelMissileOperation2.setBackground(new java.awt.Color(204, 255, 255));
        jLabelMissileOperation2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMissileOperation2.setLabelFor(jLabelShoot);
        jLabelMissileOperation2.setText("Ammo Count");
        getContentPane().add(jLabelMissileOperation2, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 76, 95, -1));
        getContentPane().add(jSpinnerSolderCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 40, -1, -1));
        getContentPane().add(jSpinnerAmmoCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 76, -1, -1));

        jLabelReseve.setBackground(new java.awt.Color(255, 255, 255));
        jLabelReseve.setForeground(new java.awt.Color(255, 255, 255));
        jLabelReseve.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelReseve.setLabelFor(jLabelShoot);
        jLabelReseve.setText("Recive Massage");
        jLabelReseve.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jLabelReseve, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 136, 133, -1));

        jTextAreaReciveMassage.setColumns(20);
        jTextAreaReciveMassage.setRows(5);
        jScrollPane1.setViewportView(jTextAreaReciveMassage);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 156, 514, 174));

        jTextFieldSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSendActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 336, 514, 41));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/asset/Helicopter.jpg"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255), 2));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxHelicopterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHelicopterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHelicopterActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
         String massage = "Helicopter : "+jTextFieldSend.getText();
         observerble.ReceiveMassage(massage);
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jButtonSendItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jButtonSendItemStateChanged
           
    }//GEN-LAST:event_jButtonSendItemStateChanged

    private void jTextFieldSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSendActionPerformed

    private void jCheckBoxHelicopterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxHelicopterItemStateChanged
           if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED){
               observerble.setPosition(true);
                 cleatToFire = true;
           }else if(evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED){
               observerble.setPosition(false);
               cleatToFire = false;
               
               jLabelLaserOperation.setEnabled(false);
               jLabelMissileOperation.setEnabled(false);
               jLabelShoot.setEnabled(false);
           }
    }//GEN-LAST:event_jCheckBoxHelicopterItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Helicopter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Helicopter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Helicopter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Helicopter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
               new Helicopter().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JCheckBox jCheckBoxHelicopter;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAreaCleared;
    private javax.swing.JLabel jLabelLaserOperation;
    private javax.swing.JLabel jLabelMissileOperation;
    private javax.swing.JLabel jLabelMissileOperation2;
    private javax.swing.JLabel jLabelReseve;
    private javax.swing.JLabel jLabelShoot;
    private javax.swing.JLabel jLabelSolderCount;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSliderHelicopter;
    private javax.swing.JSpinner jSpinnerAmmoCount;
    private javax.swing.JSpinner jSpinnerSolderCount;
    private javax.swing.JTextArea jTextAreaReciveMassage;
    private javax.swing.JTextField jTextFieldSend;
    // End of variables declaration//GEN-END:variables

    @Override
    public void sendMassage(String text, char name) {
       if(name == 'H' || name == 'A'){
           jTextAreaReciveMassage.append("Control Room : "+text+"\n");
       }
    }

    @Override
    public void AreaClear(boolean clear) {
        if(clear){
            jLabelAreaCleared.setText("Area Clear");
        }else{
            jLabelAreaCleared.setText("Area Not Clear");
        }
    }

    @Override
    public void Position(int level) {
        if(cleatToFire){
            jLabelLaserOperation.setEnabled(level >= 70);
            jLabelLaserOperation.setBackground(Color.RED);
            jLabelMissileOperation.setEnabled(level >= 50);
            jLabelMissileOperation.setBackground(Color.RED);
            jLabelShoot.setEnabled(level >= 20);
            jLabelShoot.setBackground(Color.RED);
        }else{
            jLabelLaserOperation.setEnabled(false);
            jLabelMissileOperation.setEnabled(false);
            jLabelShoot.setEnabled(false);
        }
    }

    @Override
    public void FuelCount(int count) {
        
    }
    
}
